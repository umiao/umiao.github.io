{"meta":{"title":"The blog of Blur","subtitle":"Hearing the fall of snow.","description":"Personal blog of blur.","author":"Blur - Shenghui Xu","url":"http://example.com","root":"/"},"pages":[{"title":"About Me","date":"2022-04-16T17:45:16.000Z","updated":"2022-04-16T21:04:08.505Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"Who am i This is Shenghui Xu and welcome to my blog. I am currently a year-one MS student with the Electrical Computer Engineering department of University of California, Los Angeles. I am now focusing on the track of Signals &amp; Systems and have a GPA of 4.0. I am also an incoming applied researcher intern at ebay. Before I went to UCLA, I was an undergraduate student majored in Computer Science with Soochow University. I graduated with honor in Sep. 2016 (with a GPA of 3.83). Skills and Tools Languages Python &#x2F; Matlab &#x2F; R &#x2F; Java &#x2F; JavaScript &#x2F; C++ Bash &#x2F; CMD &#x2F; Code Climate Frameworks TensorFlow &#x2F; Torch &#x2F; Keras &#x2F; Theano &#x2F; CUDA &#x2F; CUDNN Scikit-learn &#x2F; nltk &#x2F; Numpy &#x2F; Spark (PySpark) Qt Web HTML&#x2F;HTML5 &#x2F; CSS &#x2F; Node.js jQuery &#x2F; Vue.js &#x2F; quasar Tornado &#x2F; Chrome Dev Tools Editor &amp; IDE VIM &#x2F; Sublime Text &#x2F; Notepad++ &#x2F; Lime Text Visual Studio &#x2F; Qtcreator &#x2F; Pycharm &#x2F; Eclipse Version Control &amp; Deployment Git &#x2F; SVN &#x2F; Github &#x2F; GitLab &#x2F; Gitee &#x2F; Anaconda &#x2F; npm Testing Jenkins &#x2F; Lint &#x2F; Pytest &#x2F; Docker &#x2F; Unit Testing Data Management MySQL &#x2F; MongoDB &#x2F; Redis &#x2F; Memcached Projects Experiences"}],"posts":[{"title":"SQL Study Note - Basics","slug":"SQL-Study-Note-Basics","date":"2022-04-16T21:05:53.000Z","updated":"2022-04-16T22:38:44.933Z","comments":true,"path":"2022/04/16/SQL-Study-Note-Basics/","link":"","permalink":"http://example.com/2022/04/16/SQL-Study-Note-Basics/","excerpt":"Overview The core of database system is to interact with DB (DataBase) with DBMS (Database Management System).","text":"Overview The core of database system is to interact with DB (DataBase) with DBMS (Database Management System). The DB can be generally divided into: Relational DB NoSQL DB (e.g., KV (key-value) based DB) Recommended code style of SQL (Structed Query Language): Capitalize all keywords and reserved words, and lowercase all other contents. Each statement should end with ;. Keywords and Syntax RulesThe query syntax SHOW DATABASES 1SHOW DATABASES; List all the names of exisitng databases (under the current schema). USE 1234USE database_name;SELECT * from table;SELECT * from database_name.table; -- Must specify the database_name for the DBs which are not in use Select one DB as the default one. SELECT 1SELECT (column_name) FROM (table_name) WHERE (condition) ORDER BY (col_name). Select the desired data from a table. It should be noted that you should use &#x3D; in SQL to determine equivalence. (It DOES NOT mean assignment.) You can conduct calculation on the selected result. AS 1SELECT (column_name) FROM (table_name) WHERE (condition) ORDER BY (col_name). For each col_name, table_name to be queried and the queried results, you can always to set alias (surname) for them with AS. – &#x2F; comment 12-- This a comment.// This is also acceptable. DISTINCT 1SELECT DISTINCT column_name FROM t Add DISTINCT ahead of the queried target (column) to receive all the unique values. AND &#x2F; OR &#x2F; NOT 1SELECT * FROM t WHERE col_a &gt; 10 and col_b = &#x27;CA&#x27; Logical operator to be used with the WHERE clause. IN 1SELECT * FROM t WHERE col_a IN (&#x27;A&#x27;, &#x27;B&#x27;) Determine if the queried value belongs to a set. BETWEEN 123SELECT * FROM t WHERE point BETWEEN 100 AND 300;SELECT * FROM t WHERE point &gt;= 100 AND point &lt;= 300;-- These two are equivalent Determine if the queried value within a given interval. Both ends of the interval are closed ([beg, end]). LIKE 12SELECT * FROM t WHERE name like &#x27;b%&#x27;-- Able to match &#x27;Bob&#x27; and &#x27;bike&#x27; Provide functionality similar to Regular Expression. % can match arbitrary string, _ can match arbitrary char. Not sensitive to the case. REGEXP 1SELECT * FROM t WHERE name REGEX &#x27;^f[a-z]+d&#x27; Match a given Regular Expression pattern. IS NULL 12SELECT * FROM t WHERE name IS NULL;SELECT * FROM t WHERE name IS NOT NULL; Query all the records which are (not) null in a given column. ORDER BY 1SELECT * FROM t ORDER BY col_name DESC / AESC Decide the sorting order of the returned records. LIMIT 12SELECT * FROM t LIMIT offset, tot_numSELECT * FROM t LIMIT tot_num Restrict the number of the returned records. Skip the first $n&#x3D;$offset records and then return tot_num lines of records. Return all the records if number of matched records fewer than tot_num. INNER JOIN 123SELECT * FROM t_a JOIN t_b on t_a.col_1 = t_b.col_2;SELECT * FROM t_a JOIN t_b on t_a.col_1 = DB_2.t_b.col_2;-- You can conduct crossed-DB join by specifying the name of the DB not in use. Can be simply writtene as JOIN. Concat two tables based on the given condition. Conduct Cartesian product implicitly. SELF JOIN 1SELECT * FROM t_a AS a JOIN t_a AS b on a.col_1 = b.col_2; A table can join with itself, but different alias are required. Multi-table JOIN 1SELECT * FROM t_a JOIN t_b on a.col_1 = b.col_2 JOIN t_c on b.col_2 = c.col_3; Multiple (n) tables can be joined but this is not recommended when $ n &gt; 3 $ due to performance concern. Composite JOIN &#x2F; Implicit JOIN 1SELECT * FROM t_a JOIN t_b on a.col_1 = b.col_2 JOIN t_c on b.col_2 = c.col_3; Sometimes only a tuple of multiple attributes can uniquely identify a row of the table. In this case, these attributes become Composite Primary Key. 1SELECT * FROM t_a, t_b; Implicit JOIN is conducted in the above example but this is not recommended, too. OUTER JOIN 1SELECT * FROM t_a AS a JOIN t_b AS b on a.col_1 = b.col_2 JOIN t_c AS c on b.col_2 = c.col_3; When using INNER JOIN, some records of the left table cannot match with the right table because the condition of the ON clause is not satisfied. However, if we want to return all the records of the left (right) table regardless of the boolean value of the ON clause, we can use LEFT (RIGHT) OUTER JOIN. You should use RIGHT JOIN instead of LEFT JOIN as possible. SELF OUTER JOIN is similar, and alias is still required. USING 123SELECT * FROM t_a JOIN t_b on t_a.col_1 = t_b.col_1;SELECT * FROM t_a JOIN t_b USING (col_1);-- These two are equivalent. Can be used to simplify the code, if the column names of the to-be-joined tables are exactly the same. You can Join on a tuple like ‘USING (id1, id2, id3)’ and these column names should be exactly the same as well (in the two tables). NATURAL JOIN 1SELECT * FROM t_a NATURAL JOIN t_b; Let the compiler (DBMS) to decide the way of join. Not recommended to use! CROSS JOIN 1SELECT * FROM t_a CROSS JOIN t_b; Conduct Cartesian Product. UNION 1SELECT * FROM a UNION SELECT * FROM b; Concatenate multiple queried results together (on the direction of row). The column names should be exactly the same. IT SHOULD BE NOTED that ORDER BY can be set only once, so union all the results before setting the ORDER clause. The update &#x2F; delete &#x2F; insert syntax The column attributes of table: PK： primary key NN： Not Null UQ：Unique Index B： binary UN： unsigned data type ZF： zero filled AI： Auto incremental G： Generated column Data Type in MySQL: INT (11): integer with a length of 11 VARCHAR(50): array of char with a size $\\le 50$. CHAR(50): array of char with a size $&#x3D; 50$. DEFAULT: Use the given default value to fill this column. Insert data to table: 1INSERT INTO customers VALUES (DEFAULT, ‘John’, ‘Smith’, ‘1990-01-01’, NULL, ‘address’, ‘city’, ‘CA’, DEFAULT); At the same time, MySQL allows to specify the column names to be assigned values. 1INSERT INTO customers (first_name, …, state, points) VALUES (…); In this case, you do not need to assign the values to the order (of columns) defined by the table. The number of affected rows would be returned after successful insertion. Insert Multi-rows: 1INSERT INTO shippers (name) VALUES (‘S1’), (‘S2’), (‘S3’); LAST_INSERT_ID: 1 Returns the most recently generated Auto Incremental ID. Enable hierarchical data insertion. I.E., find the ID of the latest inserted data, and then use the id to associate &#x2F; update other tables. This syntax feature can eliminate ambiguity, and it is also convenient to correspond a main table record to multiple sub table records. Duplicate Table: 1CREATE TABLE orders_archived AS SELECT * FROM orders; Use the selected partial &#x2F; entire data of other table to create a duplicate. However, column attributes (constraints) like PK, AI would be ignored. Batch Insertion with Select: 1INSERT INTO orders_archived SELECT * FROM orders WHERE order_date &lt; ’2019-01-01’; Use the selected partial &#x2F; entire data of other table to create a duplicate.","categories":[{"name":"Data Science","slug":"Data-Science","permalink":"http://example.com/categories/Data-Science/"},{"name":"SQL","slug":"Data-Science/SQL","permalink":"http://example.com/categories/Data-Science/SQL/"},{"name":"Job Search","slug":"Job-Search","permalink":"http://example.com/categories/Job-Search/"},{"name":"SQL","slug":"Job-Search/SQL","permalink":"http://example.com/categories/Job-Search/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://example.com/tags/SQL/"},{"name":"DataScience","slug":"DataScience","permalink":"http://example.com/tags/DataScience/"}]},{"title":"blog_test","slug":"blog-test","date":"2022-04-16T06:21:37.000Z","updated":"2022-04-16T06:21:37.197Z","comments":true,"path":"2022/04/15/blog-test/","link":"","permalink":"http://example.com/2022/04/15/blog-test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-04-16T06:19:15.574Z","updated":"2022-04-16T06:19:15.574Z","comments":true,"path":"2022/04/15/hello-world/","link":"","permalink":"http://example.com/2022/04/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Hello World","slug":"test-image","date":"2013-07-15T00:01:34.000Z","updated":"2022-04-16T18:02:49.351Z","comments":true,"path":"2013/07/14/test-image/","link":"","permalink":"http://example.com/2013/07/14/test-image/","excerpt":"","text":"This is a header some content some ccc","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"Hexo","slug":"Linux/Hexo","permalink":"http://example.com/categories/Linux/Hexo/"},{"name":"Tools","slug":"Tools","permalink":"http://example.com/categories/Tools/"},{"name":"PHP","slug":"Tools/PHP","permalink":"http://example.com/categories/Tools/PHP/"}],"tags":[{"name":"PS3","slug":"PS3","permalink":"http://example.com/tags/PS3/"},{"name":"Games","slug":"Games","permalink":"http://example.com/tags/Games/"}]}],"categories":[{"name":"Data Science","slug":"Data-Science","permalink":"http://example.com/categories/Data-Science/"},{"name":"SQL","slug":"Data-Science/SQL","permalink":"http://example.com/categories/Data-Science/SQL/"},{"name":"Job Search","slug":"Job-Search","permalink":"http://example.com/categories/Job-Search/"},{"name":"SQL","slug":"Job-Search/SQL","permalink":"http://example.com/categories/Job-Search/SQL/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"Hexo","slug":"Linux/Hexo","permalink":"http://example.com/categories/Linux/Hexo/"},{"name":"Tools","slug":"Tools","permalink":"http://example.com/categories/Tools/"},{"name":"PHP","slug":"Tools/PHP","permalink":"http://example.com/categories/Tools/PHP/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://example.com/tags/SQL/"},{"name":"DataScience","slug":"DataScience","permalink":"http://example.com/tags/DataScience/"},{"name":"PS3","slug":"PS3","permalink":"http://example.com/tags/PS3/"},{"name":"Games","slug":"Games","permalink":"http://example.com/tags/Games/"}]}